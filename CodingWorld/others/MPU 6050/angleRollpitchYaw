#include <Wire.h>

float RateRoll, RatePitch, RateYaw;
float AccX, AccY, AccZ;
float AngleRoll, AnglePitch, AngleYaw;
float previousTime = 0;
float currentTime = 0;
float deltaTime = 0;
float yawAngle = 0; // Initialize yawAngle

void gyro_signals(void) {
    // Configure the accelerometer
    Wire.beginTransmission(0x68);
    Wire.write(0x1A); // Configure the accelerometer
    Wire.write(0x05); // Set the configuration
    Wire.endTransmission();

    Wire.beginTransmission(0x68);
    Wire.write(0x1C); // Set accelerometer full-scale range to ±4g
    Wire.write(0x10); // Configuration value
    Wire.endTransmission();

    Wire.beginTransmission(0x68);
    Wire.write(0x3B); // Start reading from ACCEL_XOUT_H
    Wire.endTransmission();
    Wire.requestFrom(0x68, 6);

    int16_t AccXLSB = Wire.read() << 8 | Wire.read();
    int16_t AccYLSB = Wire.read() << 8 | Wire.read();
    int16_t AccZLSB = Wire.read() << 8 | Wire.read();

    // Configure the gyroscope
    Wire.beginTransmission(0x68);
    Wire.write(0x1B); // Set gyroscope full-scale range to ±500°/s
    Wire.write(0x08); // Configuration value
    Wire.endTransmission();

    Wire.beginTransmission(0x68);
    Wire.write(0x43); // Start reading from GYRO_XOUT_H
    Wire.endTransmission();
    Wire.requestFrom(0x68, 6);

    int16_t GyroX = Wire.read() << 8 | Wire.read();
    int16_t GyroY = Wire.read() << 8 | Wire.read();
    int16_t GyroZ = Wire.read() << 8 | Wire.read();

    // Convert the gyroscope rates to degrees per second
    RateRoll = (float)GyroX / 65.5;
    RatePitch = (float)GyroY / 65.5;
    RateYaw = (float)GyroZ / 65.5;

    // Convert the accelerometer readings to g's
    AccX = (float)AccXLSB / 4096 - 0.05;
    AccY = (float)AccYLSB / 4096 + 0.01;
    AccZ = (float)AccZLSB / 4096 - 0.11;

    // Compute roll and pitch angles
    AngleRoll = atan(AccY / sqrt(AccX * AccX + AccZ * AccZ)) * 180 / 3.142;
    AnglePitch = -atan(AccX / sqrt(AccY * AccY + AccZ * AccZ)) * 180 / 3.142;


        currentTime = millis() / 1000.0; // Convert milliseconds to seconds
    deltaTime = currentTime - previousTime;
    previousTime = currentTime;
    
    yawAngle += RateYaw * deltaTime;
    AngleYaw = yawAngle; // Set the yaw angle to AngleYaw
}

void setup() {
    Serial.begin(57600);
    pinMode(13, OUTPUT);
    digitalWrite(13, HIGH);
    Wire.setClock(400000);
    Wire.begin();
    delay(250);

    Wire.beginTransmission(0x68);
    Wire.write(0x6B); // Wake up the MPU-6050
    Wire.write(0x00); // Set the sleep bit to 0
    Wire.endTransmission();
}

void loop() {
    gyro_signals();
    Serial.print("Roll angle [°]= ");
    Serial.print(AngleRoll);
    Serial.print(" Pitch angle [°]= ");
    Serial.print(AnglePitch);
    Serial.print(" Yaw angle [°]= ");
    Serial.println(AngleYaw);
    delay(50);
}
